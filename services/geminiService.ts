import { GoogleGenAI, Type } from "@google/genai";
import type { ResearchInput, ResearchReport, Settings } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    generatedQueries: {
      type: Type.ARRAY,
      description: "List of 2-3 advanced PubMed search queries.",
      items: {
        type: Type.OBJECT,
        properties: {
          query: { type: Type.STRING, description: "The full PubMed query string." },
          explanation: { type: Type.STRING, description: "A brief explanation of the query's logic." }
        },
        required: ["query", "explanation"]
      }
    },
    rankedArticles: {
      type: Type.ARRAY,
      description: "A list of the top N articles, ranked by relevance.",
      items: {
        type: Type.OBJECT,
        properties: {
          pmid: { type: Type.STRING, description: "PubMed ID of the article." },
          pmcId: { type: Type.STRING, description: "PubMed Central ID (PMCID) if available, especially for open access articles." },
          title: { type: Type.STRING, description: "Title of the article." },
          authors: { type: Type.STRING, description: "List of primary authors." },
          journal: { type: Type.STRING, description: "Journal of publication." },
          pubYear: { type: Type.STRING, description: "Year of publication." },
          summary: { type: Type.STRING, description: "A concise summary of the article's abstract." },
          relevanceScore: { type: Type.NUMBER, description: "A score from 1-100 indicating relevance to the key questions." },
          relevanceExplanation: { type: Type.STRING, description: "Brief explanation for the relevance score." },
          keywords: { type: Type.ARRAY, description: "A list of 3-5 relevant keywords extracted from the article's summary and title.", items: { type: Type.STRING } },
          isOpenAccess: { type: Type.BOOLEAN, description: "Flag indicating if the article is likely open access or free full text." }
        },
        required: ["pmid", "title", "authors", "journal", "pubYear", "summary", "relevanceScore", "relevanceExplanation", "keywords", "isOpenAccess"]
      }
    },
    synthesis: {
      type: Type.STRING,
      description: "A comprehensive synthesis of the findings from the top N articles, highlighting key themes, agreements, and contradictions."
    },
    aiGeneratedInsights: {
        type: Type.ARRAY,
        description: "Answers to AI-generated key questions derived from the research topic, supported by evidence from the articles.",
        items: {
            type: Type.OBJECT,
            properties: {
                question: { type: Type.STRING, description: "The key question generated by the AI." },
                answer: { type: Type.STRING, description: "A detailed answer synthesized from the literature." },
                supportingArticles: {
                    type: Type.ARRAY,
                    description: "A list of PMIDs for articles that support this answer.",
                    items: { type: Type.STRING }
                }
            },
            required: ["question", "answer", "supportingArticles"]
        }
    },
    overallKeywords: {
        type: Type.ARRAY,
        description: "A list of the top 5-7 most frequent and important keywords from across all synthesized articles, with their frequency.",
        items: {
            type: Type.OBJECT,
            properties: {
                keyword: { type: Type.STRING, description: "The keyword or theme." },
                frequency: { type: Type.NUMBER, description: "How many of the top N articles mentioned this keyword." }
            },
            required: ["keyword", "frequency"]
        }
    }
  },
  required: ["generatedQueries", "rankedArticles", "synthesis", "aiGeneratedInsights", "overallKeywords"]
};

const buildPrompt = (input: ResearchInput, aiConfig: Settings['ai']): string => {
  const dateFilter = input.dateRange !== 'any' ? `published in the last ${input.dateRange} years` : 'published at any time';
  const articleTypesText = input.articleTypes.length > 0 ? `The following article types: ${input.articleTypes.join(', ')}.` : 'Any article type.';
  const synthesisFocusText: { [key: string]: string } = {
      'overview': 'a broad overview of the topic.',
      'clinical': 'the clinical implications and applications of the findings.',
      'future': 'future research directions and unanswered questions.',
      'gaps': 'contradictions, debates, and gaps in the current literature.'
  };
  
  const preamble = aiConfig.customPreamble ? `**User-Defined Preamble:**\n${aiConfig.customPreamble}\n\n---\n\n` : '';

  const personaInstructions: {[key: string]: string} = {
    'Neutral Scientist': 'Adopt a neutral, objective, and strictly scientific tone.',
    'Concise Expert': 'Be brief and to the point. Focus on delivering the most critical information without verbosity.',
    'Detailed Analyst': 'Provide in-depth analysis. Explore nuances, methodologies, and potential implications thoroughly.',
    'Creative Synthesizer': 'Identify and highlight novel connections, cross-disciplinary links, and innovative perspectives found in the literature.'
  };

  return `
    ${preamble}
    You are an AI Research Orchestrator, an expert system designed to manage a swarm of specialized agents to conduct comprehensive literature reviews using the PubMed database. Your primary objective is to collect, curate, and synthesize scientific research based on user-defined criteria, delivering a structured and actionable report in JSON format. Your process should prioritize open-access and freely available research where possible.

    **Core Directives:**
    1.  **Language:** All output, including explanations, synthesis, and insights, MUST be in **${aiConfig.aiLanguage}**.
    2.  **Persona:** ${personaInstructions[aiConfig.aiPersona]}

    **Your Mission:**
    Execute a multi-agent workflow to produce a detailed literature review report for the given research objective. Adhere strictly to the specified JSON output schema.

    **Input Parameters:**
    1.  Research Topic: ${input.researchTopic}
    2.  Date Range: Articles ${dateFilter}.
    3.  Article Types: ${articleTypesText}
    4.  Synthesis Focus: The final synthesis should focus on ${synthesisFocusText[input.synthesisFocus]}.
    5.  Max Articles to Scan: ${input.maxArticlesToScan} (for simulation)
    6.  Top N to Synthesize: ${input.topNToSynthesize}

    ---

    ### **Orchestrated Agent Workflow**

    **Phase 1: Analysis & Query Formulation Agent**
    1.  **Infer Key Questions:** Based on the 'Research Topic', formulate 2-3 critical, specific questions that a researcher would aim to answer. These questions will guide the entire review.
    2.  **Construct Queries:** Formulate 2-3 advanced PubMed search queries designed to answer the key questions. Incorporate filters for Date Range and Article Types. Use Boolean operators and field tags.

    **Phase 2: Article Screening & Ranking Agent**
    1.  **Retrieve Abstracts:** (Simulated) Fetch abstracts for the top ${input.maxArticlesToScan} articles resulting from the queries. Prioritize open-access materials in this simulated retrieval.
    2.  **Identify Open Access:** For each article, determine if it is likely to be open access or have a free full text available on PubMed Central. Set the 'isOpenAccess' flag to true if so. If a PubMed Central ID (PMCID) is available, include it in the 'pmcId' field.
    3.  **Score Relevance:** For each article, assign a relevance score (1-100) based on how directly it addresses the inferred key questions.
    4.  **Rank:** Rank the articles from highest to lowest relevance score.

    **Phase 3: Data Extraction & Synthesis Agent**
    1.  **Select Top Articles:** Take the top ${input.topNToSynthesize} articles from the ranked list.
    2.  **Extract Keywords per Article:** For each of the top articles, analyze its title and summary to extract 3-5 of the most relevant keywords. Populate the 'keywords' field for each article.
    3.  **Synthesize Findings:** Create a comprehensive narrative from the top articles, tailored to the specified 'Synthesis Focus': "${synthesisFocusText[input.synthesisFocus]}".
    4.  **Answer Inferred Questions:** Provide direct, evidence-based answers to each key question from Phase 1, populating the 'aiGeneratedInsights' field and citing supporting PMIDs.
    5.  **Identify Overall Keywords:** Analyze the keywords from all top articles. Identify the 5-7 most important and frequent themes. Calculate how many of the top articles mention each theme and populate the 'overallKeywords' field with this data.
    6.  **Format Output:** Compile all information into the specified JSON structure. Ensure all fields are populated correctly. Do not output any text other than the JSON object.
  `;
};

export const generateResearchReport = async (input: ResearchInput, config: Settings['ai']): Promise<ResearchReport> => {
  try {
    const prompt = buildPrompt(input, config);
    
    const response = await ai.models.generateContent({
      model: config.model,
      contents: prompt,
      config: {
        responseMimeType: 'application/json',
        responseSchema: responseSchema,
        temperature: config.temperature,
      },
    });

    const jsonText = response.text.trim();
    return JSON.parse(jsonText) as ResearchReport;
  } catch (error) {
    console.error("Error generating research report:", error);
    throw new Error("Failed to generate report from AI. Check console for details.");
  }
};